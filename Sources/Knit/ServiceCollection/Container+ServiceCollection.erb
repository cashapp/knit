//
// NOTICE:
//
// This file is generated from Container+ServiceCollection.erb by ERB.
// Do NOT modify it directly.
// Instead, modify Container+ServiceCollection.erb and run `scripts/gencode`.
//
<% type_count = 20 %>

import Foundation

extension Container {

    /// Registers a service factory into a collection.
    ///
    /// Usage:
    /// ```
    /// let container = Container()
    /// container.addBehavior(ServiceCollector())
    /// container.registerIntoCollection(Animal.self) { _ in Cat(...) }
    /// container.registerIntoCollection(Animal.self) { _ in Dog(...) }
    ///
    /// let animals = resolver.resolveCollection(Animal.self)
    /// print(animals.entries) // [Cat, Dog]
    /// ```
    /// - Parameters:
    ///   - service: The service type to register.
    ///   - factory: The closure to specify how the service type is resolved with the dependencies of the type.
    ///              It is invoked when the ``Container`` needs to instantiate the instance.
    ///              It takes a ``Resolver`` to inject dependencies to the instance,
    ///              and returns the instance of the component type for the service.
    /// - Returns: The registered service entry.
    @discardableResult
    public func registerIntoCollection<Service>(
        _ service: Service.Type,
        factory: @escaping (Resolver) -> Service
    ) -> ServiceEntry<Service> {
        self.register(service, name: makeUniqueCollectionRegistrationName(), factory: factory)
    }

    /// Registers a service factory into a collection.
    ///
    /// Usage:
    /// ```
    /// let container = Container()
    /// container.addBehavior(ServiceCollector())
    /// container.autoregisterIntoCollection(Animal.self, initializer: Cat.init)
    /// container.autoregisterIntoCollection(Animal.self, initializer: Dog.init)
    ///
    /// let animals = resolver.resolveCollection(Animal.self)
    /// print(animals.entries) // [Cat, Dog]
    /// ```
    /// - Parameters:
    ///   - service: The service type to register.
    ///   - initializer: Initializer of the registered service.
    /// - Returns: The registered service entry.
    @discardableResult
    public func autoregisterIntoCollection<Service>(
        _ service: Service.Type,
        initializer: @escaping (()) -> Service
    ) -> ServiceEntry<Service> {
        self.autoregister(service, name: makeUniqueCollectionRegistrationName(), initializer: initializer)
    }

<% (1..type_count).each do |i| %>
<% types = (1..i).map { |n| "T#{n}" }.join(", ") %>
    /// Registers a service factory into a collection.
    ///
    /// Usage:
    /// ```
    /// let container = Container()
    /// container.addBehavior(ServiceCollector())
    /// container.autoregisterIntoCollection(Animal.self, initializer: Cat.init)
    /// container.autoregisterIntoCollection(Animal.self, initializer: Dog.init)
    ///
    /// let animals = resolver.resolveCollection(Animal.self)
    /// print(animals.entries) // [Cat, Dog]
    /// ```
    /// - Parameters:
    ///   - service: Registered service type.
    ///   - initializer: Initializer of the registered service.
    /// - Returns: The registered service entry.
    @discardableResult
    public func autoregisterIntoCollection<Service, <%= types %>>(
        _ service: Service.Type,
        initializer: @escaping ((<%= types %>)) -> Service
    ) -> ServiceEntry<Service> {
        self.autoregister(service, name: makeUniqueCollectionRegistrationName(), initializer: initializer)
    }
<% end %>

    // MARK: - Private Methods

    private func makeUniqueCollectionRegistrationName() -> String {
        "\(collectionRegistrationPrefix)-\(UUID().uuidString)"
    }

}
